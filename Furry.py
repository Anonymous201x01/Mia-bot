import telebot
import random
import time
import os
import re
import json
import threading
from datetime import datetime, timedelta

TOKEN = os.getenv("TOKEN")
OWNER_ID = 7107785168
MAX_COUNT = 15

bot = telebot.TeleBot(TOKEN)

WARNS_FILE = "warns.json"
BANS_FILE = "bans.json"
MUTES_FILE = "mutes.json"
USERS_FILE = "users.json"
STATE_FILE = "bot_state.json"

def load_data(filename):
    if os.path.exists(filename):
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data(data, filename):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

warns = load_data(WARNS_FILE)
bans = load_data(BANS_FILE)
mutes = load_data(MUTES_FILE)
users = load_data(USERS_FILE)
bot_state = load_data(STATE_FILE)

if not bot_state:
    bot_state = {
        "sleeping": False,
        "ignored_users": [],
        "owner_commands": {
            "—Å–ø–∞—Ç—å": "–ü—Ä–∏–∫–∞–∑ –ø–æ–Ω—è–ª–∞, —Å–ª–∞–¥–∫–∏—Ö –º–Ω–µ —Å–Ω–æ–≤",
            "–ø—Ä–æ—Å–Ω–∏—Å—å": "–£–∂–µ! –Ø —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ—é",
            "–∏–≥–Ω–æ—Ä–∏—Ä—É–π": "{user} —è –æ–±–∏–¥–µ–ª–∞—Å—å –∏ –±–æ–ª—å—à–µ —Å —Ç–æ–±–æ–π –Ω–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é, –¥–∏–Ω–∞—Ö—É–π!",
            "–∑–∞–±—É–¥—å –æ–±–∏–¥—ã": "–Ø –≤—Å–µ—Ö –ø—Ä–æ—â–∞—é"
        }
    }
    save_data(bot_state, STATE_FILE)

arts_folder = "."
all_arts = [f for f in os.listdir(arts_folder) if f.lower().endswith((".jpg", ".png", ".jpeg"))]
active_chats = {}
chat_art_pools = {}

WARN_MESSAGES = {
    1: "–ë—É–¥—å –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 1/5",
    2: "–í–µ–¥–∏ —Å–µ–±—è —Ö–æ—Ä–æ—à–æ, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 2/5",
    3: "–¢—ã –Ω–∞ –≥—Ä–∞–Ω–∏ –±–∞–Ω–∞, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 3/5",
    4: "–¢—ã —Å–∫–æ—Ä–æ –ø–æ–π–¥–µ—à—å –Ω–∞—Ö—É–π, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 4/5",
    5: "–ü–æ–∫–µ–¥–∞ —Ö—É–µ—Å–æ—Å, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 5/5. {user} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω"
}

def add_user(user):
    user_id = str(user.id)
    if user_id not in users:
        users[user_id] = {
            "first_name": user.first_name or "",
            "last_name": user.last_name or "",
            "username": user.username or ""
        }
        save_data(users, USERS_FILE)

def clean_text(text):
    return re.sub(r'[^\w\s]', '', text.lower()).strip()

def get_next_art(chat_id):
    if chat_id not in chat_art_pools or not chat_art_pools[chat_id]:
        chat_art_pools[chat_id] = all_arts.copy()
        random.shuffle(chat_art_pools[chat_id])
    return chat_art_pools[chat_id].pop()

def send_art(chat_id):
    if bot_state["sleeping"]:
        return
    art = get_next_art(chat_id)
    with open(art, "rb") as f:
        bot.send_photo(chat_id, f)
    active_chats[chat_id] = time.time()

def is_admin(chat_id, user_id):
    try:
        member = bot.get_chat_member(chat_id, user_id)
        return member.status in ['administrator', 'creator']
    except:
        return False

def is_owner(chat_id, user_id):
    return str(user_id) == str(OWNER_ID)

def clean_old_data():
    global warns, mutes
    current_time = datetime.now()
    
    for chat_id in list(warns.keys()):
        for user_id in list(warns[chat_id].keys()):
            warn_data = warns[chat_id][user_id]
            if 'expires' in warn_data and datetime.fromisoformat(warn_data['expires']) < current_time:
                del warns[chat_id][user_id]
        if not warns[chat_id]:
            del warns[chat_id]
    
    for chat_id in list(mutes.keys()):
        for user_id in list(mutes[chat_id].keys()):
            mute_end = datetime.fromisoformat(mutes[chat_id][user_id]['until'])
            if mute_end < current_time:
                try:
                    bot.restrict_chat_member(
                        chat_id=chat_id,
                        user_id=user_id,
                        can_send_messages=True,
                        can_send_media_messages=True,
                        can_send_other_messages=True,
                        can_add_web_page_previews=True
                    )
                except:
                    pass
                del mutes[chat_id][user_id]
        if not mutes[chat_id]:
            del mutes[chat_id]
    
    save_data(warns, WARNS_FILE)
    save_data(mutes, MUTES_FILE)

def schedule_cleaner():
    while True:
        clean_old_data()
        time.sleep(600)

cleaner_thread = threading.Thread(target=schedule_cleaner)
cleaner_thread.daemon = True
cleaner_thread.start()

@bot.message_handler(commands=['furry'])
def furry_cmd(message):
    if bot_state["sleeping"] and str(message.from_user.id) != str(OWNER_ID):
        return
    
    chat_id = message.chat.id
    parts = message.text.split()
    count = 1
    if len(parts) > 1 and parts[1].isdigit():
        count = min(int(parts[1]), MAX_COUNT)
    
    if count == 1:
        send_art(chat_id)
    else:
        arts_to_send = [get_next_art(chat_id) for _ in range(count)]
        for art_path in arts_to_send:
            with open(art_path, "rb") as f:
                bot.send_photo(chat_id, f)
        active_chats[chat_id] = time.time()

@bot.message_handler(commands=['listusers'])
def list_users_command(message):
    if message.from_user.id != OWNER_ID:
        bot.reply_to(message, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return
    
    if not users:
        bot.reply_to(message, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    text_lines = ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–∏—Å–∞–ª–∏ –±–æ—Ç—É:"]
    for uid, info in users.items():
        name = f"{info.get('first_name','')} {info.get('last_name','')}".strip()
        username = info.get('username')
        line = f"ID: {uid} | –ò–º—è: {name}"
        if username:
            line += f" | @{username}"
        text_lines.append(line)
    
    bot.reply_to(message, "\n".join(text_lines))

@bot.message_handler(commands=['miahelp'])
def show_mia_help(message):
    help_text = """<b>üìö –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π:</b>
‚Ä¢ –î–ª—è –∫–æ–º–∞–Ω–¥ –∏ –º–∏–Ω–∏-–∏–≥—Ä –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ú–∏—è"
‚Ä¢ –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ—Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ú–∏"

<b>üñº –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞—Ä—Ç–æ–≤:</b>
/furry - –°–ª—É—á–∞–π–Ω—ã–π —Ñ—É—Ä—Ä–∏-–∞—Ä—Ç
/furry N - –ù–µ—Å–∫–æ–ª—å–∫–æ –∞—Ä—Ç–æ–≤ (–º–∞–∫—Å. 15)

<b>‚öñÔ∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤):</b>
[–æ—Ç–≤–µ—Ç] –≤–∞—Ä–Ω - –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (5 –≤–∞—Ä–Ω–æ–≤ = –±–∞–Ω)
[–æ—Ç–≤–µ—Ç] —Å–Ω—è—Ç—å –≤–∞—Ä–Ω - –°–Ω—è—Ç—å 1 –≤–∞—Ä–Ω
[–æ—Ç–≤–µ—Ç] —Å–Ω—è—Ç—å –≤–∞—Ä–Ω—ã - –°–Ω—è—Ç—å –≤—Å–µ –≤–∞—Ä–Ω—ã
[–æ—Ç–≤–µ—Ç] –±–∞–Ω - –ó–∞–±–∞–Ω–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞
—Ä–∞–∑–±–∞–Ω @user - –†–∞–∑–±–∞–Ω–∏—Ç—å

<b>üîá –ö–æ–º–∞–Ω–¥—ã –º—É—Ç–∞:</b>
[–æ—Ç–≤–µ—Ç] –º—É—Ç X–º - –ú—É—Ç –Ω–∞ X –º–∏–Ω—É—Ç (–º–∞–∫—Å. 60)
[–æ—Ç–≤–µ—Ç] –º—É—Ç X—á - –ú—É—Ç –Ω–∞ X —á–∞—Å–æ–≤ (–º–∞–∫—Å. 24)
[–æ—Ç–≤–µ—Ç] –º—É—Ç X–¥ - –ú—É—Ç –Ω–∞ X –¥–Ω–µ–π (–º–∞–∫—Å. 7)
[–æ—Ç–≤–µ—Ç] —Ä–∞–∑–º—É—Ç - –°–Ω—è—Ç—å –º—É—Ç –¥–æ—Å—Ä–æ—á–Ω–æ

<b>üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –ú–∏—è):</b>
–ú–∏—è –∫–æ–≥–æ <–¥–µ–π—Å—Ç–≤–∏–µ> - –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
–ú–∏—è @user <–≤–æ–ø—Ä–æ—Å> - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"""

    bot.reply_to(message, help_text, parse_mode="HTML")

@bot.message_handler(commands=['help'])
def show_owner_help(message):
    if message.chat.type != 'private' or str(message.from_user.id) != str(OWNER_ID):
        return
    
    help_text = """<b>üîê –õ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –ú–∏—è):</b>
–ú–∏—è —Å–ø–∞—Ç—å - –°–ø—è—â–∏–π —Ä–µ–∂–∏–º
–ú–∏—è –ø—Ä–æ—Å–Ω–∏—Å—å - –†–∞–∑–±—É–¥–∏—Ç—å
–ú–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–π [–æ—Ç–≤–µ—Ç] - –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
–ú–∏—è –∑–∞–±—É–¥—å –æ–±–∏–¥—ã - –ü—Ä–æ—Å—Ç–∏—Ç—å –≤—Å–µ—Ö

<b>üë• –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>
/listusers - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/miahelp - –ü–æ–º–æ—â—å –¥–ª—è –≤—Å–µ—Ö"""
    
    bot.reply_to(message, help_text, parse_mode="HTML")

@bot.message_handler(func=lambda message: message.text.lower().startswith("–º—É—Ç "))
def mute_user(message):
    clean_old_data()
    chat_id = str(message.chat.id)
    admin_id = str(message.from_user.id)
    
    if not is_owner(chat_id, admin_id) and not is_admin(chat_id, admin_id):
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    target_id = None
    if message.reply_to_message:
        target_id = str(message.reply_to_message.from_user.id)
    else:
        parts = message.text.split()
        if len(parts) >= 3 and parts[1].startswith('@'):
            username = parts[1][1:]
            for uid, user_data in users.items():
                if user_data.get('username', '').lower() == username.lower():
                    target_id = uid
                    break
    
    if not target_id:
        bot.reply_to(message, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username")
        return
    
    if target_id == admin_id:
        bot.reply_to(message, "–ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å —Å–µ–±—è")
        return
    if is_owner(chat_id, target_id):
        bot.reply_to(message, "–ù–µ–∞")
        return
    if not is_owner(chat_id, admin_id) and is_admin(chat_id, target_id):
        bot.reply_to(message, "–ù–µ–ª—å–∑—è –∑–∞–º—É—Ç–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∞")
        return
    
    time_match = re.search(r"(\d+)([–º—á–¥])", message.text.lower())
    if not time_match:
        bot.reply_to(message, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: '–º—É—Ç 10–º'")
        return
    
    amount = int(time_match.group(1))
    unit = time_match.group(2)
    
    if unit == '–º' and amount > 60:
        bot.reply_to(message, "–û—à–∏–±–∫–∞, –º–∞–∫—Å–∏–º—É–º 60 –º–∏–Ω—É—Ç")
        return
    elif unit == '—á' and amount > 24:
        bot.reply_to(message, "–û—à–∏–±–∫–∞, –º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞")
        return
    elif unit == '–¥' and amount > 7:
        bot.reply_to(message, "–û—à–∏–±–∫–∞, –º–∞–∫—Å–∏–º—É–º 7 –¥–Ω–µ–π")
        return
    
    if unit == '–º':
        mute_time = timedelta(minutes=amount)
    elif unit == '—á':
        mute_time = timedelta(hours=amount)
    else:
        mute_time = timedelta(days=amount)
    
    mute_until = datetime.now() + mute_time
    
    if chat_id not in mutes:
        mutes[chat_id] = {}
    mutes[chat_id][target_id] = {
        'by': admin_id,
        'until': mute_until.isoformat()
    }
    save_data(mutes, MUTES_FILE)
    
    try:
        bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=target_id,
            until_date=int(mute_until.timestamp()),
            can_send_messages=False,
            can_send_media_messages=False,
            can_send_other_messages=False,
            can_add_web_page_previews=False
        )
        
        user_data = users.get(target_id, {})
        username = f"@{user_data.get('username')}" if user_data.get('username') else user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        time_str = f"{amount}{unit}"
        if unit == '–º':
            time_str = f"{amount} –º–∏–Ω—É—Ç"
        elif unit == '—á':
            time_str = f"{amount} —á–∞—Å–æ–≤"
        else:
            time_str = f"{amount} –¥–Ω–µ–π"
        
        bot.reply_to(message, f"{username} –∑–∞–≤–∞–ª–∏–ª –µ–±–∞–ª–æ –Ω–∞ {time_str}")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")
        if chat_id in mutes and target_id in mutes[chat_id]:
            del mutes[chat_id][target_id]
            save_data(mutes, MUTES_FILE)

@bot.message_handler(func=lambda message: message.text.lower().startswith(("—Ä–∞–∑–º—É—Ç ", "—Ä–∞–∑–º—É—Ç")))
def unmute_user(message):
    clean_old_data()
    chat_id = str(message.chat.id)
    admin_id = str(message.from_user.id)
    
    if not is_owner(chat_id, admin_id) and not is_admin(chat_id, admin_id):
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    target_id = None
    if message.reply_to_message:
        target_id = str(message.reply_to_message.from_user.id)
    elif len(message.text.split()) > 1:
        username = message.text.split()[1].strip('@')
        for uid, user_data in users.items():
            if user_data.get('username', '').lower() == username.lower():
                target_id = uid
                break
    
    if not target_id:
        bot.reply_to(message, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username")
        return
    
    if chat_id not in mutes or target_id not in mutes[chat_id]:
        bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–º—É—á–µ–Ω")
        return
    
    try:
        bot.restrict_chat_member(
            chat_id=chat_id,
            user_id=target_id,
            can_send_messages=True,
            can_send_media_messages=True,
            can_send_other_messages=True,
            can_add_web_page_previews=True
        )
        
        del mutes[chat_id][target_id]
        if not mutes[chat_id]:
            del mutes[chat_id]
        save_data(mutes, MUTES_FILE)
        
        user_data = users.get(target_id, {})
        username = f"@{user_data.get('username')}" if user_data.get('username') else user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        bot.reply_to(message, f"–ú—É—Ç —Å–Ω—è—Ç! {username} —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –º—É—Ç–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.reply_to_message and message.text.lower() == "–≤–∞—Ä–Ω")
def warn_user(message):
    clean_old_data()
    chat_id = str(message.chat.id)
    admin_id = str(message.from_user.id)
    target_id = str(message.reply_to_message.from_user.id)
    
    if target_id == admin_id:
        bot.reply_to(message, "–ù–µ–ª—å–∑—è –≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω —Å–µ–±–µ")
        return
    if is_owner(chat_id, target_id):
        bot.reply_to(message, "–ù–µ–∞")
        return
    
    if not is_owner(chat_id, admin_id) and not is_admin(chat_id, admin_id):
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    if not is_owner(chat_id, admin_id) and is_admin(chat_id, target_id):
        bot.reply_to(message, "–ù–µ–ª—å–∑—è –≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω –¥—Ä—É–≥–æ–º—É –∞–¥–º–∏–Ω–∞")
        return
    
    if chat_id not in warns:
        warns[chat_id] = {}
    if target_id not in warns[chat_id]:
        warns[chat_id][target_id] = {"count": 0, "warns": []}
    
    warn_count = warns[chat_id][target_id]["count"] + 1
    expires = datetime.now() + timedelta(days=warn_count)
    
    warns[chat_id][target_id] = {
        "count": warn_count,
        "warns": warns[chat_id][target_id]["warns"] + [{
            "by": admin_id,
            "time": datetime.now().isoformat(),
            "expires": expires.isoformat(),
            "is_owner": is_owner(chat_id, admin_id)
        }]
    }
    
    save_data(warns, WARNS_FILE)
    
    if warn_count >= 5:
        if chat_id not in bans:
            bans[chat_id] = []
        bans[chat_id].append(target_id)
        save_data(bans, BANS_FILE)
        
        try:
            bot.ban_chat_member(chat_id, target_id)
            user_data = users.get(target_id, {})
            username = f"@{user_data.get('username')}" if user_data.get('username') else user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            bot.reply_to(message, WARN_MESSAGES[5].format(user=username))
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")
    else:
        bot.reply_to(message.reply_to_message, WARN_MESSAGES[warn_count])

@bot.message_handler(func=lambda message: message.reply_to_message and message.text.lower() in ["—Å–Ω—è—Ç—å –≤–∞—Ä–Ω", "—Å–Ω—è—Ç—å –≤–∞—Ä–Ω—ã"])
def remove_warn(message):
    clean_old_data()
    chat_id = str(message.chat.id)
    admin_id = str(message.from_user.id)
    target_id = str(message.reply_to_message.from_user.id)
    command = message.text.lower()
    
    if not is_owner(chat_id, admin_id) and not is_admin(chat_id, admin_id):
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    if chat_id not in warns or target_id not in warns[chat_id] or warns[chat_id][target_id]["count"] == 0:
        bot.reply_to(message, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤–∞—Ä–Ω–æ–≤")
        return
    
    if any(w["is_owner"] and not is_owner(chat_id, admin_id) for w in warns[chat_id][target_id]["warns"]):
        bot.reply_to(message, "–ù–µ —Ö—É–µ–π")
        return
    
    if command == "—Å–Ω—è—Ç—å –≤–∞—Ä–Ω":
        warns[chat_id][target_id]["count"] -= 1
        warns[chat_id][target_id]["warns"].pop()
        if warns[chat_id][target_id]["count"] == 0:
            del warns[chat_id][target_id]
            if not warns[chat_id]:
                del warns[chat_id]
        save_data(warns, WARNS_FILE)
        bot.reply_to(message, f"–°–Ω—è—Ç 1 –≤–∞—Ä–Ω. –¢–µ–ø–µ—Ä—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {warns[chat_id].get(target_id, {}).get('count', 0)}/5 –≤–∞—Ä–Ω–æ–≤")
    else:
        del warns[chat_id][target_id]
        if not warns[chat_id]:
            del warns[chat_id]
        save_data(warns, WARNS_FILE)
        bot.reply_to(message, "–í—Å–µ –≤–∞—Ä–Ω—ã —Å–Ω—è—Ç—ã")

@bot.message_handler(func=lambda message: message.reply_to_message and message.text.lower() == "–±–∞–Ω")
def ban_user(message):
    clean_old_data()
    chat_id = str(message.chat.id)
    admin_id = str(message.from_user.id)
    target_id = str(message.reply_to_message.from_user.id)
    
    if target_id == admin_id:
        bot.reply_to(message, "–ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å —Å–µ–±—è")
        return
    if is_owner(chat_id, target_id):
        bot.reply_to(message, "–ù–µ–∞")
        return
    
    if not is_owner(chat_id, admin_id) and not is_admin(chat_id, admin_id):
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    if not is_owner(chat_id, admin_id) and is_admin(chat_id, target_id):
        bot.reply_to(message, "–ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∞")
        return
    
    if chat_id not in bans:
        bans[chat_id] = []
    bans[chat_id].append(target_id)
    save_data(bans, BANS_FILE)
    
    try:
        bot.ban_chat_member(chat_id, target_id)
        user_data = users.get(target_id, {})
        username = f"@{user_data.get('username')}" if user_data.get('username') else user_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        bot.reply_to(message, f"{username} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.text.lower().startswith(("—Ä–∞–∑–±–∞–Ω ", "—Ä–∞–∑–±–∞–Ω")))
def unban_user(message):
    clean_old_data()
    chat_id = str(message.chat.id)
    admin_id = str(message.from_user.id)
    
    if not is_owner(chat_id, admin_id) and not is_admin(chat_id, admin_id):
        bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    if message.reply_to_message:
        target_id = str(message.reply_to_message.from_user.id)
        if chat_id in bans and target_id in bans[chat_id]:
            try:
                bot.unban_chat_member(chat_id, target_id)
                bans[chat_id].remove(target_id)
                if not bans[chat_id]:
                    del bans[chat_id]
                save_data(bans, BANS_FILE)
                bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω")
            except Exception as e:
                bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å. –û—à–∏–±–∫–∞: {str(e)}")
        else:
            bot.reply_to(message, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω")
        return
    
    if len(message.text.split()) > 1:
        username = message.text.split()[1].strip('@')
        try:
            found = False
            for uid, user_data in users.items():
                if user_data.get('username', '').lower() == username.lower():
                    target_id = uid
                    found = True
                    break
            
            if found:
                if chat_id in bans and target_id in bans[chat_id]:
                    try:
                        bot.unban_chat_member(chat_id, target_id)
                        bans[chat_id].remove(target_id)
                        if not bans[chat_id]:
                            del bans[chat_id]
                        save_data(bans, BANS_FILE)
                        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–±–∞–Ω–µ–Ω")
                    except Exception as e:
                        bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å @{username}. –û—à–∏–±–∫–∞: {str(e)}")
                else:
                    bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –∑–∞–±–∞–Ω–µ–Ω")
            else:
                bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
        except Exception as e:
            bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
    else:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Ä–∞–∑–±–∞–Ω @username –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ")

@bot.message_handler(func=lambda message: "–º–∏—è –∫–æ–≥–æ" in message.text.lower())
def who_game(message):
    if bot_state["sleeping"]:
        return
    
    chat_id = message.chat.id
    match = re.search(r"–∫–æ–≥–æ\s*<(.+?)>", message.text, re.IGNORECASE)
    
    if match:
        phrase = match.group(1).strip()
        try:
            members = []
            offset = 0
            while True:
                chat_members = bot.get_chat_members(chat_id, offset=offset, limit=100)
                if not chat_members:
                    break
                members.extend([m.user for m in chat_members])
                offset += 100
            
            if members:
                member = random.choice(members)
                name = member.first_name
                if member.username:
                    name += f" (@{member.username})"
                bot.send_message(chat_id, f"{name} –∞/—É {phrase}")
            else:
                bot.send_message(chat_id, "–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ '–∫–æ–≥–æ': {e}")
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

@bot.message_handler(func=lambda message: message.text.lower().startswith("–º–∏—è @"))
def question_game(message):
    if bot_state["sleeping"]:
        return
    
    chat_id = message.chat.id
    match = re.search(r"@(\w+)\s*<(.+?)>", message.text, re.IGNORECASE)
    
    if match:
        username = match.group(1).strip()
        question = match.group(2).strip()
        answers = [
            "–î–∞", "–ù–µ—Ç", "–ù–∞–≤–µ—Ä–Ω–æ–µ", "–í—Ä—è–¥ –ª–∏", 
            "100%", "–ê–±—Å–æ–ª—é—Ç–Ω–æ —Ç–æ—á–Ω–æ", "–ù–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ",
            "–°–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–∑–∂–µ", "–≠—Ç–æ —Å–µ–∫—Ä–µ—Ç", "–Ø—Å–Ω–æ –¥–µ–ª–æ!"
        ]
        resp = random.choice(answers)
        bot.send_message(chat_id, f"@{username}, {resp} ({question})")

@bot.message_handler(func=lambda message: str(message.from_user.id) == str(OWNER_ID) and 
                                        message.text.lower().startswith(("–º–∏—è ", "–º–∏—è,")))
def handle_owner_commands(message):
    text = message.text.lower()
    chat_id = message.chat.id
    
    if "—Å–ø–∞—Ç—å" in text:
        if bot_state["sleeping"]:
            bot.reply_to(message, "...")
        else:
            bot_state["sleeping"] = True
            save_data(bot_state, STATE_FILE)
            bot.reply_to(message, "–ü—Ä–∏–∫–∞–∑ –ø–æ–Ω—è–ª–∞, —Å–ª–∞–¥–∫–∏—Ö –º–Ω–µ —Å–Ω–æ–≤")
        return
    
    if "–ø—Ä–æ—Å–Ω–∏—Å—å" in text:
        if not bot_state["sleeping"]:
            bot.reply_to(message, "–Ø –∏ –Ω–µ —Å–ø–∞–ª–∞")
        else:
            bot_state["sleeping"] = False
            save_data(bot_state, STATE_FILE)
            bot.reply_to(message, "–£–∂–µ! –Ø —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ—é")
        return
    
    if "–∏–≥–Ω–æ—Ä–∏—Ä—É–π" in text and message.reply_to_message:
        user_id = str(message.reply_to_message.from_user.id)
        if user_id in bot_state["ignored_users"]:
            bot.reply_to(message, "–û–Ω –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –∏–∑–≤–∏–Ω–∏–ª—Å—è")
        else:
            bot_state["ignored_users"].append(user_id)
            save_data(bot_state, STATE_FILE)
            user_name = message.reply_to_message.from_user.first_name
            if message.reply_to_message.from_user.username:
                user_name = f"@{message.reply_to_message.from_user.username}"
            reply = bot_state["owner_commands"]["–∏–≥–Ω–æ—Ä–∏—Ä—É–π"].format(user=user_name)
            bot.reply_to(message, reply)
        return
    
    if "–∑–∞–±—É–¥—å –æ–±–∏–¥—ã" in text:
        if not bot_state["ignored_users"]:
            bot.reply_to(message, "–Ø –Ω–µ –æ–±–∏–∂–∞—é—Å—å üòÑ")
        else:
            bot_state["ignored_users"] = []
            save_data(bot_state, STATE_FILE)
            bot.reply_to(message, "–Ø –≤—Å–µ—Ö –ø—Ä–æ—â–∞—é")
        return

@bot.message_handler(func=lambda message: any(word in message.text.lower() for word in ["–º–∏ –∏–∑–≤–∏–Ω–∏", "–º–∏ –ø—Ä–æ—Å—Ç–∏"]))
def handle_apology(message):
    user_id = str(message.from_user.id)
    chat_id = message.chat.id
    
    if user_id not in bot_state["ignored_users"]:
        bot.reply_to(message, "–ó–∞ —á—Ç–æ? –í—Å–µ —Ö–æ—Ä–æ—à–æ.")
        return
    
    owner_mention = f"<a href='tg://user?id={OWNER_ID}'>–í–ª–∞–¥–µ–ª–µ—Ü</a>"
    msg = bot.reply_to(message, f"{owner_mention}, –ø—Ä–æ—â–∞—Ç—å?", parse_mode="HTML")
    bot.register_next_step_handler(msg, process_apology_response, user_id)

def process_apology_response(message, user_id_to_forgive):
    if str(message.from_user.id) != str(OWNER_ID):
        return
    
    if message.text.lower() == "–¥–∞":
        if user_id_to_forgive in bot_state["ignored_users"]:
            bot_state["ignored_users"].remove(user_id_to_forgive)
            save_data(bot_state, STATE_FILE)
        bot.reply_to(message, "–Ø –±–æ–ª—å—à–µ –Ω–µ –æ–±–∏–∂–∞—é—Å—å!")
    else:
        bot.reply_to(message, "–ü—É—Å—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–π–º–µ—Ç —á—Ç–æ –ø–æ—Ç–µ—Ä—è–ª")

@bot.message_handler(content_types=['text'])
def handle_text_messages(message):
    add_user(message.from_user)
    text_raw = message.text
    if not text_raw:
        return
    
    chat_id = str(message.chat.id)
    user_id = str(message.from_user.id)
    
    if chat_id in bans and user_id in bans[chat_id]:
        try:
            bot.delete_message(chat_id, message.message_id)
        except:
            pass
        return
    
    if chat_id in mutes and user_id in mutes[chat_id]:
        mute_until = datetime.fromisoformat(mutes[chat_id][user_id]['until'])
        if mute_until > datetime.now():
            try:
                bot.delete_message(chat_id, message.message_id)
            except:
                pass
            return
        else:
            del mutes[chat_id][user_id]
            save_data(mutes, MUTES_FILE)
    
    if user_id in bot_state["ignored_users"]:
        return
    
    if bot_state["sleeping"] and not text_raw.startswith('/'):
        return
    
    text = clean_text(text_raw)
    
    if text == "–º–∏—è":
        bot.reply_to(message, "–î–∞–∞–∞? ‚ñº„Éª·¥•„Éª‚ñº")
        return
    
    general_responses = {
        "–º–∏ —Ç—ã –∑–∞ —Ä—Ñ": "ZOV ZOV CBO ZA –ù–ê–®–ò–• ZOV ZOV ZOV",
        "–º–∏ —Ç—ã –∑–∞ —É–∫—Ä–∞–∏–Ω—É": "–ü–û–¢–£–ñ–ù–û –ü–û–¢–£–ñ–ù–û –°–õ–ê–í–ê –£–ö–†–ê–ò–ù–ï –°–õ–ê–í–ê –†–û–°–°–ò–ï",
        "–º–∏ —Ö—É–∂–µ –∏—Ä–∏—Å–∞": "–ù—É –≤–æ—Ç –∏ –µ–±–∏—Å—å —Å –Ω–∏–º",
        "–º–∏ –ª—É—á—à–µ –∏—Ä–∏—Å–∞": ":)",
        "–º–∏ —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç": "–ù–µ –≤–æ–ª–Ω—É–π—Å—è, —Ç–µ–±—è –ø–æ—Å–∞–¥—è—Ç",
        "–º–∏ —Ç—ã –¥–µ–≤–æ—á–∫–∞": "–° –≤–∏–¥—É –¥–∞",
        "–º–∏ —Ç—ã –º–∞–ª—å—á–∏–∫": "–ú–∏–º–æ",
        "–º–∏ —Ç—ã —á–µ–ª–æ–≤–µ–∫": " ) ",
        "–º–∏ –ø—Ä–∏–≤–µ—Ç": "–ü—Ä–∏–≤–µ—Ç!",
        "–º–∏ –ø–æ–∫–∞": "–ü–æ–∫–∞ –ø–æ–∫–∞~",
        "–º–∏ —Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏": "–°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤ –º–æ–π —Ö–æ—Ä–æ—à–∏–π/–∞—è, —Å–ø–∏ —Å–ø–æ–∫–æ–π–Ω–æ",
        "–º–∏ –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ": "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ï—Å–ª–∏ —Å–µ–π—á–∞—Å —É—Ç—Ä–æ",
        "–º–∏ –¥–∞–≤–∞–π –¥—Ä—É–∂–∏—Ç—å": "–ú—ã —É–∂–µ –¥—Ä—É–∂–∏–º",
        "–º–∏ —è —Ç–µ–±–µ –Ω—Ä–∞–≤–ª—é—Å—å": "–ö–æ–Ω–µ—á–Ω–æ –ø—É–ø—Å–∏–∫",
        "–º–∏ –∫–∞–∫–æ–π —Ç–≤–æ–π –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç": "–†–æ–∑–æ–≤—ã–π",
        "–º–∏ –∫–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –µ–¥–∞": "–í–∫—É—Å–Ω–∞—è",
        "–º–∏ —Ç—ã —Å–ø–∏—à—å": "–¢–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å —Ç–µ–±–µ",
        "–º–∏ –∫—Ç–æ —Ç–≤–æ–π –æ—Ç–µ—Ü": "–Ø —Å–∏—Ä–æ—Ç–∞... –®—É—á—É , –º–æ–π –¥—Ä—É–≥ –ü—É–±–µ—Ä—Ç–∞—Ç–Ω–∏–∫ ;)",
        "–º–∏ —Ç—ã —Ñ—É—Ä—Ä–∏": " –§—É—Ä—Ä–∏? –§—É. –î–∞ —è —Ñ—É—Ä—Ä–∏",
        "–º–∏ –∫—Ç–æ —Ç–≤–æ—è –º–∞–º–∞": "–ó–∞—á–µ–º –º–Ω–µ –º–∞–º–∞? –•–æ—Ç—è –º–æ–∂–µ—à—å –µ–π –±—ã—Ç—å –µ—Å–ª–∏ —Ö–æ—á–µ—à—å",
        "–º–∏ —Ç—ã —Ö–æ—Ä–æ—à–∞—è": "–ê–•–ê–•–ê–•–ê–•–ê–•–ê –ø–æ—à–µ–ª –Ω–∞—Ö—É–π"
    }
    
    normal_responses = {
        "–º–∏ –∏–¥–∏ –Ω–∞—Ö—É–π": "–•—É–π —Å–ª–∏—à–∫–æ–º –º–∞–ª",
        "–º–∏ —à–ª—é—Ö–∞": "–ù–∞ –º–µ—Å—Ç–æ —Ç–≤–æ–µ–π –º–∞–º—ã –Ω–µ –ø—Ä–µ—Ç–µ–Ω–¥—É—é",
        "–º–∏ —Å—É–∫–∞": "–ì–∞–≤ –≥–∞–≤",
        "–º–∏ –ª—É—á—à–∞—è": "–°–ø–∞—Å–∏–±–æ—á–∫–∏‚ù§Ô∏è",
        "–º–∏ –¥–∞–≤–∞–π –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è": "–†–∞–Ω–æ–≤–∞—Ç–æ",
        "–º–∏ —Ç—ã –≤—ã–π–¥–µ—à—å –∑–∞ –º–µ–Ω—è": "–û–≥–æ",
        "–º–∏ –≥–∏—Ç–ª–µ—Ä": "–ù–∏—Ö—É—è —Å–µ–±–µ",
        "–∏—Ä–∏—Å –µ–±–ª–∞–Ω": "–ü–æ —Ñ–∞–∫—Ç—É",
        "–∏—Ä–∏—Å –µ–±–∞–Ω": "–ü–æ —Ñ–∞–∫—Ç—É",
        "–º–∏ –∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞": "–í—Å—ë —Ö–æ—Ä–æ—à–æ",
        "–º–∏ —Ç—ã –Ω–∞—Ç—É—Ä–∞–ª": "–°–∞–º –∫–∞–∫ –¥—É–º–∞–µ—à—å?",
        "—è –¥—É–º–∞—é –¥–∞": "–ü–∏–∑–¥–∞",
        "–¥–∞": "–ü–∏–∑–¥–∞",
        "–Ω–µ—Ç": "–ü–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç",
        "—à–ª—é—Ö–∏ –∞—Ä–≥—É–º–µ–Ω—Ç": "–¢—ã –¥—É–º–∞–µ—à—å –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ü–µ–ø–æ—á–∫—É –¥–æ –∫–æ–Ω—Ü–∞ ? –ù–µ–∞",
        "–º–∏ —è —Ç–µ–±—è –ª—é–±–ª—é": "‚ù§Ô∏è",
        "–º–∏ —Ç—ã –±–æ—Ç": "–®–∞—Ö–º–∞—Ç–Ω—ã–π",
        "–º–∏ –≥–æ —Å–µ–∫—Å": "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∏–ª–∏ –∫ —Å—á–∞—Å—Ç—å—é —è –Ω–µ –º–æ–≥—É –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —ç—Ç–∏–º",
        "–º–∏ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2": "5",
        "–º–∏ —Ç—ã –∞–¥–º–∏–Ω": "–ü–æ—Ü–µ–ª–æ–≤–∞—É–π –º–æ–∏ –Ω–æ–≥–∏, –º–æ–∂–µ—Ç –Ω–µ –∑–∞–±–∞–Ω—é",
        "–ø–æ—Ü–µ–ª–æ–≤–∞–ª –Ω–æ–≥–∏ –º–∏–∏": "–Ø –ø–æ–ª—å—â–µ–Ω–∞",
        "–∏—Ä–∏—Å –ª—É—á—à–∏–π": "–ò–∑ —Ö—É–¥—à–∏—Ö",
        "–∞–π–∑–µ–Ω —Å–æ–ª–æ": "–£ –ê–π–∑–µ–Ω–∞ —Ñ–∞–Ω–∞—Ç–æ–≤ –∞–π–∫—å—é –¥–∏–∫–∏—Ö –ø—Ä–∏–º–∞—Ç–æ–≤",
        "–∏—Ä–∏—Å —Å–æ–ª–æ": "–ò—Ä–∏—Å –µ–±–ª–∞–Ω",
    }
    
    for key, resp in general_responses.items():
        if key in text:
            bot.reply_to(message, resp)
            return
    
    for key, resp in normal_responses.items():
        if key in text:
            bot.reply_to(message, resp)
            return
    
    if "–ª–æ–ª–∏" in text:
        bot.reply_to(message, "üëÆ‚Äç‚ôÇÔ∏è")
        return
    
    cp_triggers = ["—Ü–ø", "cp", "child porn", "–¥–µ—Ç—Å–∫–æ–µ –ø–æ—Ä–Ω–æ", "–¥–µ—Ç—Å–∫–∞—è –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è", "–¥–µ—Ç—Å–∫–∏–π –ø–æ—Ä–Ω"]
    if any(trigger in text for trigger in cp_triggers):
        try:
            admins = bot.get_chat_administrators(chat_id)
            mentions = []
            for admin in admins:
                user = admin.user
                if user.username:
                    mentions.append(f"@{user.username}")
                else:
                    mentions.append(user.first_name)
            mention_text = " ".join(mentions)
            bot.send_message(chat_id, f"–û—Å—É–∂–¥–∞—é, —è —â–∞—Å –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∑–æ–≤—É: {mention_text}")
        except Exception:
            bot.send_message(chat_id, "–û—Å—É–∂–¥–∞—é, —è —â–∞—Å –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∑–æ–≤—É")
        return
    
    if message.reply_to_message and message.reply_to_message.from_user.id == bot.get_me().id:
        reply_phrases = {
            "–≤—ã–µ–±–∞—Ç—å": "üòò",
            "—Ç—Ä–∞—Ö–Ω—É—Ç—å": "‚ù§Ô∏è‚Äçüî•",
            "–¥–µ–ª–∞—Ç—å —Å–µ–∫—Å": "‚ù§Ô∏è",
            "–æ—Ç—Å–æ—Å–∞—Ç—å": "–ù—É –¥–æ–ø—É—Å—Ç–∏–º —è —Ñ—É—Ç–∞ ‚ù§Ô∏è",
            "–æ—Ç–ª–∏–∑–∞—Ç—å": "üòñüò≥",
            "–∏–∑–Ω–∞—Å–∏–ª–æ–≤–∞—Ç—å": "–ù–µ–∞ –Ω–µ –ø—Ä–æ–∫–∞—Ç–∏—Ç, –ò—Ä–∏—Å —Å–æ—Å–Ω–∏ —Ö—É–π—Ü–∞",
            "–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —á–∞–π": "‚òïüòÑ",
            "—Ä–∞—Å—Å—Ç—Ä–µ–ª—è—Ç—å": "**–í–æ—Å–∫—Ä–µ—Å–ª–∞**",
            "—Å–∂–µ—á—å": "**–≤–æ–∑—Ä–æ–¥–∏–ª–∞—Å—å**",
            "—É–±–∏—Ç—å": "**–æ–∂–∏–ª–∞**",
            "—Ç—ã –±–µ—Å—Å–º–µ—Ä—Ç–Ω–∞": "–∞–≥–∞",
            "–ø–æ–∫–∞–∂–∏ —Å–∏—Å—å–∫–∏": "–Ø —Å—Ç–µ—Å–Ω—è—é—Å—å ‚äô‚Å†Ôπè‚Å†‚äô",
            "–ø–æ–∫–∞–∂–∏ —á–ª–µ–Ω": "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –≤ –∫–∞–¥—Ä –Ω–µ –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è",
            "–ø–æ–∫–∞–∂–∏ –Ω–æ–∂–∫–∏": "–§–µ—Ç–∏—à–∏—Å—Ç",
        }
        
        for key, resp in reply_phrases.items():
            if key in text:
                bot.reply_to(message, resp)
                return

bot.infinity_polling()
